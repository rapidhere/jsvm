- description: return 1
  jsSource: |
      async function asyncFunc() {
          return await new Promise(function(accept, reject) {
              accept(1);
              return 0;
          });
      }
  expected: 1

- description: return another thread
  jsSource: |
      import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
      var man = new Man();

      async function asyncFunc() {
          return await man.instanceStaticTask(3);
      }
  expected: 3

- description: with stack
  jsSource: |
      import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
      var man = new Man();

      async function asyncFunc() {
          var pA = man.instanceStaticTask(5);
          var pB = man.instanceStaticTask(4);

          return await pA - await pB;
      }
  expected: 1.0

- description: with stack 2
  jsSource: |
    import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
    var man = new Man();

    function f(a, b) {
        return a + b + 4;
    }

    async function asyncFunc() {
        return f(await man.instanceStaticTask(2), await man.instanceStaticTask(3));
    }
  expected: 9.0

- description: await with if
  jsSource: |
    import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
    var man = new Man();

    async function asyncFunc() {
        var a;
        if (true) {
          a = await man.instanceStaticTask(2);
        } else {
          a = await man.instanceStaticTask(3);
        }

        return a;
    }
  expected: 2

- description: await in if
  jsSource: |
    import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
    var man = new Man();

    async function asyncFunc() {
      if (await man.instanceStaticTask(0)) {
        return 1;
      }
      return 2;
    }
  expected: 2

- description: await in while
  jsSource: |
    import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
    var man = new Man();

    async function asyncFunc() {
      var i = 4, sum = 0;

      while(await man.instanceStaticTask(i)) {
        sum = sum + i;
        i = i - 1;
      }

      return sum;
    }
  expected: 10.0

- description: async fib
  jsSource: |
    import * as Man from 'ranttu.rapid.jsvm.test.example.threadasync.ThreadAsyncManager';
    var man = new Man();

    async function fib(n) {
        var ret;
        if (n === 0) {
            ret = await man.instanceStaticTask(0);
        } else if (n === 1) {
            ret = await man.instanceStaticTask(1);
        } else {
            var a = fib(n - 1),
              b = fib(n - 2);
            ret = await a + await b;
        }

        return ret;
    }

    async function asyncFunc() {
        return await fib(10);
    }
  expected: 55.0