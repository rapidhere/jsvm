// ~~~ basic
group 'ranttu.rapid.jsvm'
version '0.0.1'

apply plugin: 'java'

// ~~~ dependencies

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'com.tngtech.java:junit-dataprovider:1.10.0'
    testCompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.8'
    testCompile 'com.fasterxml.jackson.core:jackson-core:2.8.8'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.8'
    testCompile 'org.mozilla:rhino:1.7.7.1'

    compile 'org.json:json:20160810'
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.guava:guava:20.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'commons-cli:commons-cli:1.4'
}

// ~~~ java source configuration
sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

compileTestJava {
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

sourceSets {
    main {
        java.srcDirs = ['src/java']
        resources.srcDirs = ['src/resources']
    }

    test {
        java.srcDirs = ['test/java']
        resources.srcDirs = ['test/resources']
    }
}

// artifacts
jar {
    manifest {
        attributes "Main-Class": "ranttu.rapid.jsvm.inter.JsvmMain"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}